name: Integration Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build
      run: |
        docker compose build

    - name: Start services
      run: |
        docker compose up -d
      
    - name: Wait for services to be ready
      run: |
        # Wait for /instance endpoint to return valid JSON
        timeout=120
        echo "Waiting up to ${timeout} seconds for services to be ready..."
        while [ $timeout -gt 0 ]; do
          echo "Attempting to connect to service (${timeout} seconds remaining)..."
          
          # Try to connect and capture both stdout and stderr
          response=$(curl -s -w "\n%{http_code}" http://localhost:9999/instance 2>&1 || true)
          curl_exit_code=$?
          
          if [ $curl_exit_code -ne 0 ]; then
            echo "Curl failed with exit code $curl_exit_code: $response"
          else
            status_code=$(echo "$response" | tail -n1)
            body=$(echo "$response" | head -n1)
            
            echo "Got status code: $status_code"
            echo "Response body: $body"
            
            if [ "$status_code" = "200" ] && echo "$body" | jq . >/dev/null 2>&1; then
              echo "Service is ready!"
              break
            fi
          fi
          
          timeout=$((timeout - 1))
          if [ $timeout -le 0 ]; then
            echo "Timeout waiting for service to be ready"
            exit 1
          fi
          
          sleep 1
        done
        sleep 5

    - name: Test Load Balancing
      run: |
        # Test that we get different hostnames
        echo "Testing load balancing across instances..."
        declare -A hostnames
        max_attempts=10
        attempt=1
        while [ $attempt -le $max_attempts ]; do
          response=$(curl -s http://localhost:9999/instance)
          hostname=$(echo $response | jq -r .instance)
          hostnames[$hostname]=1
          
          echo "Attempt $attempt: Got hostname $hostname (Total unique: ${#hostnames[@]})"
          
          # Break if we've found all 3 hostnames
          if [ ${#hostnames[@]} -eq 3 ]; then
            echo "Success! Found all 3 different instances: ${!hostnames[@]}"
            break
          fi
          
          attempt=$((attempt + 1))
          if [ $attempt -gt $max_attempts ]; then
            echo "Error: Failed to get all 3 different hostnames after $max_attempts attempts"
            echo "Only got these hostnames: ${!hostnames[@]}"
            exit 1
          fi
          sleep 1
        done

    - name: Test URL Shortening
      run: |
        echo "Testing URL shortening..."
        # Create a shortened URL
        response=$(curl -s -X POST -H "Content-Type: application/json" \
          -d '{"url":"https://example.com"}' \
          http://localhost:9999/shorten)
        
        short_url=$(echo $response | jq -r .short_url)
        if [ -z "$short_url" ] || [ "$short_url" = "null" ]; then
          echo "Error: Failed to get short URL"
          exit 1
        fi
        echo "Got short URL: $short_url"
        echo "short_url=$short_url" >> $GITHUB_ENV

    - name: Test URL Expansion
      run: |
        echo "Testing URL expansion..."
        # Test expansion endpoint
        response=$(curl -s "http://localhost:9999/expand?url=${short_url}")
        expanded_url=$(echo $response | jq -r .long_url)
        
        if [ "$expanded_url" != "https://example.com" ]; then
          echo "Error: URL expansion failed. Expected 'https://example.com', got '$expanded_url'"
          exit 1
        fi
        echo "URL expansion test passed!"

    - name: Show service logs on failure
      if: failure()
      run: docker compose logs

    - name: Cleanup
      if: always()
      run: docker compose down
